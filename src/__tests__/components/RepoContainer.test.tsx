/**
 * @jest-environment node
 */
import { renderToStaticMarkup } from 'react-dom/server';
import RepoContainer from '@/components/RepoContainer';
import type { RepoTypeElement } from '@/schemas/githubSchema';
import { fetchGitHubRepos, fetchStarredRepos } from '@/app/api';

jest.mock('@/app/api', () => ({
  fetchGitHubRepos: jest.fn(),
  fetchStarredRepos: jest.fn(),
}));

global.fetch = jest.fn((input: RequestInfo) => {
  if (typeof input === 'string' && input.includes('github-colors')) {
    return Promise.resolve({
      json: () =>
        Promise.resolve({
          JavaScript: {
            color: '#f1e05a',
            url: 'https://github.com/trending?l=JavaScript',
          },
          TypeScript: {
            color: '#3178c6',
            url: 'https://github.com/trending?l=TypeScript',
          },
        }),
    });
  }
  return Promise.resolve({
    json: () => Promise.resolve({}),
  });
}) as unknown as typeof fetch;

describe('RepoContainer', () => {
  it('should render a list of repositories with correct details', async () => {
    const fakeRepos: RepoTypeElement[] = [
      {
        id: 1,
        node_id: 'node1',
        name: 'Repo One',
        full_name: 'user/RepoOne',
        private: false,
        owner: {
          login: 'user',
          id: 1,
          node_id: 'owner1',
          avatar_url: 'https://example.com/avatar.png',
          gravatar_id: '',
          url: 'https://api.github.com/users/user',
          html_url: 'https://github.com/user',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'User',
          user_view_type: 'default',
          site_admin: false,
        },
        html_url: 'https://github.com/user/RepoOne',
        description: 'Description for repo one',
        fork: false,
        url: '',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: '2022-12-31T00:00:00Z',
        updated_at: '2022-12-31T00:00:00Z',
        pushed_at: '2022-12-31T00:00:00Z',
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 123,
        stargazers_count: 5,
        watchers_count: 5,
        language: 'JavaScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: false,
        has_discussions: false,
        forks_count: 1,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 0,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: [],
        visibility: 'public',
        forks: 1,
        open_issues: 0,
        watchers: 5,
        default_branch: 'main',
      },
      {
        id: 2,
        node_id: 'node2',
        name: 'Repo Two',
        full_name: 'user/RepoTwo',
        private: false,
        owner: {
          login: 'user',
          id: 1,
          node_id: 'owner1',
          avatar_url: 'https://example.com/avatar.png',
          gravatar_id: '',
          url: 'https://api.github.com/users/user',
          html_url: 'https://github.com/user',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'User',
          user_view_type: 'default',
          site_admin: false,
        },
        html_url: 'https://github.com/user/RepoTwo',
        description: 'Description for repo two',
        fork: false,
        url: '',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: '2023-01-01T00:00:00Z',
        updated_at: '2023-01-01T00:00:00Z',
        pushed_at: '2023-01-01T00:00:00Z',
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 456,
        stargazers_count: 2,
        watchers_count: 2,
        language: 'TypeScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: false,
        has_discussions: false,
        forks_count: 0,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 0,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: [],
        visibility: 'public',
        forks: 0,
        open_issues: 0,
        watchers: 2,
        default_branch: 'main',
      },
    ];

    const fakeStarredRepos: RepoTypeElement[] = [fakeRepos[0]];

    (fetchGitHubRepos as jest.Mock).mockResolvedValue(fakeRepos);
    (fetchStarredRepos as jest.Mock).mockResolvedValue(fakeStarredRepos);

    const element = await RepoContainer({
      username: 'user',
      onlyFavorites: false,
    });
    const html = renderToStaticMarkup(element);

    expect(html).toContain('Repo One');
    expect(html).toContain('Description for repo one');
    expect(html).toContain('Repo Two');
    expect(html).toContain('Description for repo two');

    expect(html).toContain('aria-label="Remover repositÃ³rio"');
  });

  it("should display a 'no favorites' message when there are no favorited repositories", async () => {
    const fakeRepos: RepoTypeElement[] = [
      {
        id: 1,
        node_id: 'node1',
        name: 'Repo One',
        full_name: 'user/RepoOne',
        private: false,
        owner: {
          login: 'user',
          id: 1,
          node_id: 'owner1',
          avatar_url: 'https://example.com/avatar.png',
          gravatar_id: '',
          url: 'https://api.github.com/users/user',
          html_url: 'https://github.com/user',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'User',
          user_view_type: 'default',
          site_admin: false,
        },
        html_url: 'https://github.com/user/RepoOne',
        description: 'Description for repo one',
        fork: false,
        url: '',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: '2023-01-01T00:00:00Z',
        updated_at: '2023-01-01T00:00:00Z',
        pushed_at: '2023-01-01T00:00:00Z',
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 123,
        stargazers_count: 0,
        watchers_count: 0,
        language: 'JavaScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: false,
        has_discussions: false,
        forks_count: 0,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 0,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: [],
        visibility: 'public',
        forks: 0,
        open_issues: 0,
        watchers: 0,
        default_branch: 'main',
      },
    ];
    const fakeStarredRepos: RepoTypeElement[] = [];

    (fetchGitHubRepos as jest.Mock).mockResolvedValue(fakeRepos);
    (fetchStarredRepos as jest.Mock).mockResolvedValue(fakeStarredRepos);

    const element = await RepoContainer({
      username: 'user',
      onlyFavorites: true,
    });
    const html = renderToStaticMarkup(element);

    expect(html).toContain(
      'Este usuÃ¡rio nÃ£o tem nenhum repositÃ³rio ou vocÃª ainda nÃ£o favoritou nenhum repositÃ³rio.'
    );
  });
});
