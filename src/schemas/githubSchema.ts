import { z } from 'zod';

export const userSchema = z.object({
  login: z.string(),
  id: z.number(),
  node_id: z.string(),
  avatar_url: z.string(),
  gravatar_id: z.string().nullish(),
  url: z.string(),
  html_url: z.string().nullish(),
  followers_url: z.string().nullish(),
  following_url: z.string().nullish(),
  gists_url: z.string().nullish(),
  starred_url: z.string().nullish(),
  subscriptions_url: z.string().nullish(),
  organizations_url: z.string().nullish(),
  repos_url: z.string().nullish(),
  events_url: z.string().nullish(),
  received_events_url: z.string().nullish(),
  type: z.string().nullish(),
  user_view_type: z.string(),
  site_admin: z.boolean(),
  name: z.string().nullish(),
  company: z.string().nullish(),
  blog: z.string().nullish(),
  location: z.string().nullish(),
  email: z.string().nullish(),
  hireable: z.boolean().nullish(),
  bio: z.string().nullish(),
  twitter_username: z.string().nullish(),
  public_repos: z.number().nullish(),
  public_gists: z.number().nullish(),
  followers: z.number().nullish(),
  following: z.number().nullish(),
  created_at: z.string().nullish(),
  updated_at: z.string().nullish(),
  private_gists: z.number().nullish(),
  total_private_repos: z.number().nullish(),
  owned_private_repos: z.number().nullish(),
  disk_usage: z.number().nullish(),
  collaborators: z.number().nullish(),
  two_factor_authentication: z.boolean().nullish(),
  plan: z
    .object({
      name: z.string().nullish(),
      space: z.number().nullish(),
      collaborators: z.number().nullish(),
      private_repos: z.number().nullish(),
    })
    .nullish(),
});

export type UserType = z.infer<typeof userSchema>;

export const repoSchema = z
  .array(
    z.object({
      id: z.number(),
      node_id: z.string(),
      name: z.string(),
      full_name: z.string(),
      private: z.boolean(),
      owner: z.object({
        login: z.string(),
        id: z.number(),
        node_id: z.string(),
        avatar_url: z.string(),
        gravatar_id: z.string(),
        url: z.string(),
        html_url: z.string(),
        followers_url: z.string(),
        following_url: z.string(),
        gists_url: z.string(),
        starred_url: z.string(),
        subscriptions_url: z.string(),
        organizations_url: z.string(),
        repos_url: z.string(),
        events_url: z.string(),
        received_events_url: z.string(),
        type: z.string(),
        user_view_type: z.string(),
        site_admin: z.boolean(),
      }),
      html_url: z.string(),
      description: z.string().nullish(),
      fork: z.boolean(),
      url: z.string().nullish(),
      forks_url: z.string().nullish(),
      keys_url: z.string().nullish(),
      collaborators_url: z.string().nullish(),
      teams_url: z.string().nullish(),
      hooks_url: z.string().nullish(),
      issue_events_url: z.string().nullish(),
      events_url: z.string().nullish(),
      assignees_url: z.string().nullish(),
      branches_url: z.string().nullish(),
      tags_url: z.string().nullish(),
      blobs_url: z.string().nullish(),
      git_tags_url: z.string().nullish(),
      git_refs_url: z.string().nullish(),
      trees_url: z.string().nullish(),
      statuses_url: z.string().nullish(),
      languages_url: z.string().nullish().nullish(),
      stargazers_url: z.string().nullish(),
      contributors_url: z.string().nullish(),
      subscribers_url: z.string().nullish(),
      subscription_url: z.string().nullish(),
      commits_url: z.string().nullish(),
      git_commits_url: z.string().nullish(),
      comments_url: z.string().nullish(),
      issue_comment_url: z.string().nullish(),
      contents_url: z.string().nullish(),
      compare_url: z.string().nullish(),
      merges_url: z.string().nullish(),
      archive_url: z.string().nullish(),
      downloads_url: z.string().nullish(),
      issues_url: z.string().nullish(),
      pulls_url: z.string().nullish(),
      milestones_url: z.string().nullish(),
      notifications_url: z.string().nullish(),
      labels_url: z.string().nullish(),
      releases_url: z.string().nullish(),
      deployments_url: z.string().nullish(),
      created_at: z.string().nullish(),
      updated_at: z.string().nullish(),
      pushed_at: z.string().nullish(),
      git_url: z.string().nullish(),
      ssh_url: z.string().nullish(),
      clone_url: z.string().nullish(),
      svn_url: z.string().nullish(),
      homepage: z.string().nullish().nullish(),
      size: z.number(),
      stargazers_count: z.number(),
      watchers_count: z.number(),
      language: z.string().nullish().nullish(),
      has_issues: z.boolean(),
      has_projects: z.boolean(),
      has_downloads: z.boolean(),
      has_wiki: z.boolean(),
      has_pages: z.boolean(),
      has_discussions: z.boolean(),
      forks_count: z.number().nullish(),
      mirror_url: z.string().nullish().nullish(),
      archived: z.boolean(),
      disabled: z.boolean(),
      open_issues_count: z.number().nullish(),
      license: z
        .object({
          key: z.string().nullish(),
          name: z.string().nullish(),
          url: z.string().nullish(),
          spdx_id: z.string().nullish(),
          node_id: z.string().nullish(),
          html_url: z.string().nullish(),
        })
        .nullish(),
      allow_forking: z.boolean(),
      is_template: z.boolean(),
      web_commit_signoff_required: z.boolean(),
      topics: z.array(z.unknown()),
      visibility: z.string(),
      forks: z.number().nullish(),
      open_issues: z.number().nullish(),
      watchers: z.number().nullish(),
      default_branch: z.string(),
    })
  )
  .nullish();

export type RepoType = z.infer<typeof repoSchema>;
export type RepoTypeElement = NonNullable<z.infer<typeof repoSchema>>[number];
